package com.manuanand.stocksimulator;

import java.util.Date;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/stock") // This means URL's start with /stock (after Application path)
public class StockController {
	@Autowired // This means to get the bean called stockRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private StockRepository stockRepository;
	
	///
	// Stock Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Stock addStock (
			@RequestParam String ticker, @RequestParam Double price) {
		

		Stock newStock = new Stock();
		newStock.setTicker(ticker);
		newStock.setPrice(price);
		newStock.setLastUpdated(new Date());
		
		stockRepository.save(newStock);
		
		return newStock;
	}
	
	@PostMapping(path="/adjust") // Map ONLY POST Requests
	public @ResponseBody void adjustStocks () {

		Iterable<Stock> stocks = stockRepository.findAll();
		
		for (Stock stock : stocks) {
			
			// Randomly skip one third of the time
			if (ThreadLocalRandom.current().nextInt(0,10)/3 == 0)
				continue;
			
			double price = stock.getPrice();
			
			// Adjust it b/w -10% and +10% of its value
			double lowerLimit = 0.90 * price;
			double higherLimit = 1.10 * price;
			double newPrice = ThreadLocalRandom.current().nextDouble(lowerLimit, higherLimit);
			
			stock.setPrice(newPrice);
			stock.setLastUpdated(new Date());
			
			stockRepository.save(stock);
		}
	}
	
	@GetMapping(path="/")
	public @ResponseBody Iterable<Stock> getAllStocks() {
		
		// This returns a JSON or XML with the users
		return stockRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Stock getSpecificStock(@PathVariable String id) {
		
		Integer stockId = null;
		try {
			stockId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Stock> stock = stockRepository.findById(stockId);
		if (!stock.isEmpty()) {
			return stock.get();
		} 

		return null;
	}

	@GetMapping(path="/deleteAll")
	public @ResponseBody void deleteAllStocks() {
		
		// This returns a JSON or XML with the users
		stockRepository.deleteAll();
	}
}